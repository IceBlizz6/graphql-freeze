# Based on https://github.com/ArnavK-09/rust_cli_for_npx/blob/main/.github/workflows/publish.yml

name: Publish codegen binaries

on:
  workflow_dispatch:

jobs:
  build-codegen-binaries:
    name: Build codegen binaries
    runs-on: ${{ matrix.build.os }}
    strategy:
      matrix:
        build:
          - {
              NAME: linux-x64-glibc,
              OS: ubuntu-20.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-gnu,
              BINARY_NAME: graphql-freeze-codegen,
            }
          - {
              NAME: linux-arm64-glibc,
              OS: ubuntu-20.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-gnu,
              BINARY_NAME: graphql-freeze-codegen,
            }
          - {
              NAME: win32-x64-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: x86_64-pc-windows-msvc,
              BINARY_NAME: graphql-freeze-codegen.exe,
            }
          - {
              NAME: win32-arm64-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: aarch64-pc-windows-msvc,
              BINARY_NAME: graphql-freeze-codegen.exe,
            }
          - {
              NAME: darwin-x64,
              OS: macos-13,
              TOOLCHAIN: stable,
              TARGET: x86_64-apple-darwin,
              BINARY_NAME: graphql-freeze-codegen,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-13,
              TOOLCHAIN: stable,
              TARGET: aarch64-apple-darwin,
              BINARY_NAME: graphql-freeze-codegen,
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          target: ${{ matrix.build.TARGET }}
          override: true

      - name: Build
        uses: ClementTsang/cargo-action@v0.0.3
        with:
          command: build
          directory: codegen
          args: --release --target ${{ matrix.build.TARGET }}
          use-cross: ${{ matrix.build.OS == 'ubuntu-20.04' }} # use `cross` for Linux builds

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.NAME }}
          path: codegen/target/${{ matrix.build.TARGET }}/release/${{ matrix.build.BINARY_NAME }}
          if-no-files-found: error

  publish-codegen-binaries:
    name: Publish codegen binaries
    runs-on: ubuntu-latest
    needs: build-codegen-binaries
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | awk -F ' ' '{print $3}' | tr -d '"')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Create release
        id: binary_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: "Codegen binaries v${{ env.VERSION }}"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: ./binaries/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
